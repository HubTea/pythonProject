
2021/08/22
현재 문제점
    1.Qt의 벡터와 NumPy의 벡터를 혼용

    2.glVertex3f를 사용. MeshVertex 객체가 각자 정점 좌표 저장. 성능 저하
        Class Mesh:
            MeshVertex vertices[N]

        Class MeshVertex:
            float x, y, z

        클래스가 이렇게 정의되니 렌더링할 때 vertices를 순회하며 glVertex3f를 호출해야 되고 속도가 매우 느려지게 됨.

    3.삼각형만 지원

    4.마우스, 키보드 입력 부분이 난잡함
    같은 키를 눌러도 프로그램 상태에 따라 동작이 달라짐.
    프로그램의 상태의 예시
        선택모드
            마우스 클릭 시 해당 위치의 폴리곤의 면을 선택함
        선택해제모드
            마우스 클릭 시 해당 위치의 폴리곤의 면을 선택 해제함
        연속선택모드
            마우스 클릭 시 해당 위치의 면을 기존에 선택된 면의 목록에 추가함
        translate
            마우스 이동 시 선택된 정점들을 평행이동시킴
        rotate
            마우스 이동 시 선택된 정점들을 무게중심을 중심으로 회전시킴
        scale
            마우스 이동 시 선택된 정점들을 무게중심으로부터 멀어지거나 가까워지게 함

        enum값으로 프로그램의 현재 상태를 나타내고 이 값에 따라 분기해서 적당한 동작을 할 수도 있지만,
        프로그램의 상태가 많아질수록 enum값이 매우 많아지고 관리하기 어려워질 것 같음.
        또한 현재 MainWindow객체에서 키보드 입력, GLWidget객체에서 마우스 클릭, 이동을 처리하듯이
        입력을 처리하는 코드가 분산돼있어 코드가 난잡하게 느껴짐.

해결 방안
    1.NumPy의 벡터만 사용하는 것으로 통일

    2.여러 정점들을 배열로 관리하는 객체 추가. MeshVertex 객체는 이 객체를 참조하고 배열의 인덱스를 가짐.
        Class Mesh:
            ndarray vertices    #vertices는 4행 n열 행렬
            bytearray vertices_stream   #vertices를 bytearray로 미리 변환해두면 렌더링 속도 향상

        Class MeshVertex:
            Mesh owner
            int index

        glVertex3f 대신 glDrawArrays사용 가능
        Mesh를 회전, 이동시킬 때 NumPy를 통해 연산을 빠르게 할 수 있게 됨.

    3.VertexGroup 클래스를 수정
        VertexGroup은 인터페이스로서
        직선과의 충돌여부를 판단하는 collision_with_ray,
        면 내에서 주어진 점의 반대편에 있는 점을 반환하는 opposites 등의 메소드들만 정의해놓고

        이를 구현하는 구현하는 TriangleGroup을 만듦
        또한 TriangleGroup객체들을 가지고 VertexGroup을 구현하는 GeneralGroup을 만듦





